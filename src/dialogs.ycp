/****************************************************************************

Copyright (c) 2000 - 2010 Novell, Inc.
All Rights Reserved.

This program is free software; you can redistribute it and/or
modify it under the terms of version 2 of the GNU General Public License as
published by the Free Software Foundation.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.   See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, contact Novell, Inc.

To contact Novell about this file by physical or electronic mail,
you may find current contact information at www.novell.com

****************************************************************************/
/**
 * File:	include/power-management/dialogs.ycp
 * Package:	Configuration of power-management
 * Summary:	Dialogs definitions
 * Authors:	Jiri Srain <jsrain@suse.cz>
 *
 * $Id$
 */

{

textdomain "power-management";

import "CWM";
import "Label";
import "Mode";
import "Popup";
import "PowerManagement";
import "Wizard";


/**
 * Return a modification status
 * @return true if data was modified
 */
boolean Modified() {
    return PowerManagement::Modified();
}

/**
 * Ask if Abort if modified
 * @return boolean true if answered Yes
 */
boolean ReallyAbort() {
    return !PowerManagement::Modified() || Popup::ReallyAbort(true);
}

/**
 * Ask if Abort
 * @return boolean true if answered Yes
 */
boolean AskAbort () {
    return Popup::ReallyAbort(true);
}

/**
 * Check for Abort
 * @return boolean true if was pushed
 */
boolean PollAbort() {
    return UI::PollInput() == `abort;
}

/**
 * Check for Abort durign read
 * @return boolean true if was pushed
 */
boolean ReadAbort () {
    return PollAbort () && AskAbort ();
}

/**
 * Check for Abort durign write
 * @return boolean true if was pushed
 */
boolean WriteAbort () {
    // yes-no popup
    return PollAbort () && Popup::YesNo (_("If you abort writing now, the saved
settings may be inconsistent.
Really abort?"));
}

include "power-management/widgets.ycp";

/**
 * Read settings dialog
 * @return `abort if aborted and `next otherwise
 */
symbol ReadDialog() {
    y2milestone ("Running read dialog");
    Wizard::RestoreHelp(HELPS["read"]:"");
    PowerManagement::AbortFunction = ReadAbort;
    boolean ret = PowerManagement::Read();
    return ret ? `next : `abort;
}

/**
 * Write settings dialog
 * @return `abort if aborted and `next otherwise
 */
symbol WriteDialog() {
    y2milestone ("Running write dialog");
    Wizard::RestoreHelp(HELPS["write"]:"");
    PowerManagement::AbortFunction = WriteAbort;
    boolean ret = PowerManagement::Write();
    return ret ? `next : `abort;
}

/**
 * Run dialog for ACPI buttons behavior configuration
 * @return symbol for wizard sequencer
 */
symbol MainDialog () {
    y2milestone ("Running main dialog");

    term contents = `HBox (`HStretch (), `VBox (
	`VStretch (),
	"scheme_selection",
	`VStretch ()
    ), `HStretch ());

    // dialog caption
    string caption = _("Power Management Settings");
    list<string> widget_names = ["scheme_selection",
    ];

    list<map<string,any> > w = CWM::CreateWidgets (widget_names, widgets);
    string help = CWM::MergeHelps (w);
    contents = CWM::PrepareDialog (contents, w);
    Wizard::SetContentsButtons (caption, contents, help,
	Label::BackButton (), Label::FinishButton ());
    Wizard::HideBackButton();
    Wizard::SetAbortButton(`abort, Label::CancelButton () );
    return CWM::Run (w, $[`abort : ReallyAbort ]);
}

/**
 * Run dialog for schemes configuration
 * @return symbol for wizard sequencer
 */
symbol SchemesDialog () {
    y2milestone ("Running schemes management dialog");

    term contents = `HBox (`HSpacing (2), `VBox (
	`VSpacing (2),
	"schemes_list",
	`VSpacing (2)
    ), `HSpacing (2));

    // dialog caption
    string caption = _("Power Management Profile Setup");

    return CWM::ShowAndRun ($[
	"widget_names" : ["schemes_list"],
	"widget_descr" : widgets,
	"contents" : contents,
	"caption" : caption,
	"back_button" : Label::BackButton (),
	"next_button" : Label::OKButton (),
	"fallback_functions" : $[`abort : AskAbort ]
    ]);
}

/**
 * Run dialog for single scheme configuration
 * @return symbol for wizard sequencer
 */
symbol SchemeDialog1 () {
    y2milestone ("Running single scheme management dialog part 1");

    term contents = `HBox (`HSpacing (2), `VBox (
	`VStretch(),
	"scheme_name",
	`VSpacing (1),
	"scheme_descr",
	`VStretch ()
    ), `HSpacing (2));

    // dialog caption
    string caption = _("Power Management Profile Setup");

    return CWM::ShowAndRun ($[
	"widget_names" : ["scheme_name", "scheme_descr"],
	"widget_descr" : widgets,
	"contents" : contents,
	"caption" : caption,
	"back_button" : Label::BackButton (),
	"next_button" : Label::NextButton (),
	"fallback_functions" :$[`abort : AskAbort ]
    ]);
}

/**
 * Run dialog for single scheme configuration
 * @return symbol for wizard sequencer
 */
symbol SchemeDialog2 () {
    y2milestone ("Running single scheme management dialog part 1");

    term contents = `HBox (`HStretch (), `VBox (
	`VStretch (),
	"hard_disk",
	`VStretch (),
	"cpu",
	`VStretch ()
    ), `HStretch ());

    // dialog caption
    string caption = _("Power Management Profile Setup");

    return CWM::ShowAndRun ($[
	"widget_names" : ["hard_disk", "cpu"],
	"widget_descr" : widgets,
	"contents" : contents,
	"caption" : caption,
	"back_button" : Label::BackButton (),
	"next_button" : Label::NextButton (),
	"fallback_functions" : $[`abort : AskAbort ]
    ]);
}



// pseudo dialogs

/**
 * Fetch all schemes
 * @return symbol always `mext
 */
symbol FetchSchemes () {
    PowerManagement::FetchSchemes ();
    return `next;
}

/**
 * Store all schemes
 * @return symbol always `mext
 */
symbol StoreSchemes () {
    PowerManagement::StoreSchemes ();
    return `next;
}

/**
 * Store current scheme
 * @return symbol always `mext
 */
symbol StoreScheme () {
    PowerManagement::StoreScheme ();
    return `next;
}

/* EOF */
}
