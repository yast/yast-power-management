/****************************************************************************

Copyright (c) 2000 - 2010 Novell, Inc.
All Rights Reserved.

This program is free software; you can redistribute it and/or
modify it under the terms of version 2 of the GNU General Public License as
published by the Free Software Foundation.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.   See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, contact Novell, Inc.

To contact Novell about this file by physical or electronic mail,
you may find current contact information at www.novell.com

****************************************************************************/
/**
 * File:	modules/PowerManagement.ycp
 * Package:	Configuration of power-management
 * Summary:	PowerManagement settings, input and output functions
 * Authors:	Jiri Srain <jsrain@suse.cz>
 *
 * $Id$
 *
 * Representation of the configuration of power-management.
 * Input and output routines.
 */

{

module "PowerManagement";
textdomain "power-management";

import "Mode";
import "PackageSystem";
import "Progress";
import "Report";
import "Service";
import "String";


/**
 * Mapping of cheme option identifiers in the internal structure and in the
 * created file
 * Key is internal structure, value is scheme file
 */
map<string,string> scheme_options_mapping = $[
    "SCHEME_NAME"			: "NAME",
    "SCHEME_DESCRIPTION"		: "DESCRIPTION",
    "SATA_ALPM"				: "SATA_ALPM",
    "CPUFREQ_GOVERNOR"			: "CPUFREQ_GOVERNOR",
    "CPUFREQ_SCHED_MC_POWER_SAVINGS"	: "CPUFREQ_SCHED_MC_POWER_SAVINGS",
    "CPUFREQ_ONDEMAND_UP_THRESHOLD"	: "CPUFREQ_ONDEMAND_UP_THRESHOLD",
    "CPUFREQ_ONDEMAND_POWERSAVE_BIAS"	: "CPUFREQ_ONDEMAND_POWERSAVE_BIAS",
//    "" : "",
];

/**
 * Mapping of global option identifiers in the internal structure and in the
 * created file
 * Key is internal structure, value is scheme file (2-member list, first file
 * identifier, second variable name)
 */
map<string,string> global_options_mapping = $[
    "SCHEME"		: "PM_PROFILER_PROFILE",
//    ""		: "",
];

/**
 * Was the settings modified?
 * @return boolean true if modified
 */
global boolean Modified();

// persistent variables

global list<map<string,string> > schemes = [];

global map<string,string> global_settings = $[];

global map<string,string> new_schemes = $[];

map<string,string> default_values = $[];

/* not needed any more, getting from kpowersave package
 global map scheme_names = $[
    // power saving scheme name, combo box and default contents of text entry
    "Performance" : _("Performance"),
    // power saving scheme name, combo box and default contents of text entry
    "Powersave" : _("Powersave"),
    // power saving scheme name, combo box and default contents of text entry
    "Acoustic" : _("Acoustic"),
    // power saving scheme name, combo box and default contents of text entry
    "Presentation" : _("Presentation"),
];

global map scheme_desciptions = $[
    "Scheme optimized to let machine run on maximum performance." :
	// pwer saving scheme description, contents of text entry
	_("Scheme optimized to let machine run on maximum performance."),
    "Scheme optimized to let maximum power savings take place." :
	// pwer saving scheme description, contents of text entry
	_("Scheme optimized to let maximum power savings take place."),
    "Scheme optimized to let machine run as quiet as possible." :
	// pwer saving scheme description, contents of text entry
	_("Scheme optimized to let machine run as quietly as possible."),
];*/


/**
 * Data was modified?
 */
global boolean modified = false;

/**
 */
global boolean proposal_valid = false;

/**
 * Write only, used during autoinstallation.
 * Don't run services and SuSEconfig, it's all done at one place.
 */
global boolean write_only = false;

/**
 * Abort function
 * return boolean return true if abort
 */
global boolean() AbortFunction = nil;

// UI helping variables

global list<map<string,string> > current_schemes = [];
global integer current_scheme_index = -1;
global map<string,string> current_scheme = $[];

global boolean power_available = true;
global boolean sleep_available = true;
global boolean lid_available = true;

/**
 * Abort function
 * @return blah blah lahjk
 */
global define boolean Abort() ``{
    if(AbortFunction != nil)
	return AbortFunction ();
    return false;
}

/**
 * Data was modified?
 * @return true if modified
 */
global boolean Modified() {
    y2debug("modified=%1",modified);
    return modified;
}

/**
 * Read all power-management settings
 * @return true on success
 */
global boolean Read() {
    y2milestone ("Reading power management settings");
    if (Mode::config ())
	AbortFunction = nil;

    // hide progress, it is too fast (bnc #447574)
    boolean progress_status = Progress::set (false);

    /* PowerManagement read dialog caption */
    string caption = _("Initializing Configuration");

    integer steps = 3;

    integer sl = 0;
    sleep(sl);

    boolean success = true;
    boolean stage_success = true;

    // We do not set help text here, because it was set outside
    Progress::New( caption, " ", steps, [
	    /* Progress stage 1/3 */
	    _("Check the environment"),
	    /* Progress stage 2/3 */
	    _("Read general settings"),
	    /* Progress stage 3/3 */
	    _("Read power saving profiles"),
	], [
	    /* Progress step 1/3 */
	    _("Checking the environment..."),
	    /* Progress step 2/3 */
	    _("Reading general settings..."),
	    /* Progress step 3/3 */
	    _("Reading power saving profiles..."),
	    /* Progress finished */
	    _("Finished")
	],
	""
    );

    // read database
    if(Abort()) {
	Progress::set (progress_status);
	return false;
    }
    Progress::NextStage();

    // check installed packages
    if (! Mode::test ()
	&& ! PackageSystem::CheckAndInstallPackagesInteractive (["pm-profiler"])
    )
    {
	Progress::set (progress_status);
	return false;
    }

// stage always successful
//    if(! stage_success)
//    {
//	/* Error message */
//	Report::Error(_("Cannot read the database."));
//    }
    success = success && stage_success;
    stage_success = true;
    sleep(sl);

    // read general settings
    if(Abort()) {
	Progress::set (progress_status);
	return false;
    }
    Progress::NextStage();

    list<string> r_schemes = (list<string>)
	SCR::Dir (.etc.pm-profiler.profiles.section);
    foreach (string key, string conf, global_options_mapping, {
	string v = (string)SCR::Read (
	    .etc.pm-profiler + conf );
	if (v != nil)
	    global_settings[key] = v;
    });

    if(! stage_success)
    {
	/* Error message */
	Report::Error(_("Cannot read the general settings."));
    }
    success = success && stage_success;
    stage_success = true;
    sleep(sl);

    // read saving schemes
    if(Abort()) {
	Progress::set (progress_status);
	return false;
    }
    Progress::NextStage();

    schemes = maplist (string s, r_schemes, ``{
	map<string,string> scheme = $[
	    "_scheme_id" : s,
	];
	path p = add (.etc.pm-profiler.profiles.value, s);
	foreach (string key, string conf, scheme_options_mapping, {
	    string v = (string)SCR::Read (add (p, conf));
	    scheme[key] = v;
	});
	return scheme;
    });
    new_schemes = $[];

    if(! stage_success)
    {
	/* Error message */
	Report::Warning(_("Cannot read power saving profiles."));
    }
    sleep(sl);

    /* Progress finished */
    Progress::NextStage();
    success = success && stage_success;
    sleep(sl);

    modified = false;

    y2debug ("Global settings: %1", global_settings);
    y2debug ("Power saving schemes: %1", schemes);

    Progress::set (progress_status);
    return success;
}

/**
 * Write all power-management settings
 * @return true on success
 */
global boolean Write() {
    y2milestone ("Writing power management settings");
    if (Mode::autoinst ())
	AbortFunction = nil;

    /* PowerManagement read dialog caption */
    string caption = _("Saving Configuration");

    integer steps = 2;

    integer sl = 0;
    sleep(sl);

    boolean success = true;
    boolean stage_success = true;

    // We do not set help text here, because it was set outside
    Progress::New(caption, " ", steps, [
	    /* Progress stage 1/3 */
//	    _("Write profiles"),
	    /* Progress stage 2/3 */
	    _("Write general settings"),
	    /* Progress stage 3/3 */
	    _("Restart pm-profiler daemon")
	], [
	    /* Progress step 1/3 */
//	    _("Writing profiles..."),
	    /* Progress step 2/3 */
	    _("Writing general settings..."),
	    /* Progress step 3/3 */
	    _("Restarting pm-profiler daemon..."),
	    /* Progress finished */
	    _("Finished")
	],
	""
    );

    // write schemes
    if(Abort()) return false;
    Progress::NextStage();
/*
    y2milestone ("Writing power saving schemes");
    // copy new scheme files
    foreach (string dst, string src, new_schemes, ``{
	if (dst != "")
	{
	    y2milestone ("Creating config file of scheme %1 as copy of %2",
		dst, src);
	    stage_success = (0 == SCR::Execute (.target.bash, sformat (
		"cat /etc/pm-profiler/%1 >  /etc/pm-profiler/%2",
		src, dst))) && stage_success;
	}
    });

    // remove deleted schemes
    list<string> old = (list<string>)SCR::Dir (.etc.pm-profiler.profiles.section);
    list<string> current = maplist (map<string,string> s, schemes, ``(
	s["_scheme_id"]:""
    ));
    list<string> delete = filter (string s, old, ``(! contains (current, s)));
    foreach (string s, delete, ``{
	SCR::Write (add (.etc.pm-profiler.profils.section, s), nil);
    });

    // write scheme settings
    foreach (map<string,string> scheme, schemes, ``{
	string id = scheme["_scheme_id"]:"";
	y2milestone ("Writing scheme %1", id);
	path p = add (.etc.pm-profiler.profiles.value, id);
	foreach (string key, string conf, scheme_options_mapping, {
	    if (key != "_scheme_id")
	    {
		string v = scheme[key]:nil;
		SCR::Write (add (p, conf), v);
	    }
	});
    });
    SCR::Write (.etc.pm-priofiler.profiles, nil);

    if(! stage_success)
    {
	// Error message
	Report::Error(_("Cannot write power saving profiles."));
    }
    success = success && stage_success;
    stage_success = true;
    sleep(sl);

    // write global settings
    if(Abort()) return false;
    Progress::NextStage ();
*/
    y2milestone ("Writing global settings");
    global_settings = mapmap (string k, string v, global_settings, {
	if (default_values[k]:"" == v)
	    v = "";
	return $[ k : v ];
    });
    foreach (string key, string conf, global_options_mapping, {
	string v = global_settings[key]:nil;
	SCR::Write (
	    .etc.pm-profiler + conf, v);
    });
    SCR::Write (.etc.pm-profiler, nil);

    if(! stage_success)
    {
	/* Error message */
	Report::Error(_("Cannot write general settings."));
    }
    success = success && stage_success;
    stage_success = true;
    sleep(sl);

    // restart daemon
    if(Abort()) return false;
    Progress::NextStage ();

    if (global_settings["SCHEME"]:"" == "")
    {
	y2milestone ("Stopping pm-profiler daemon");
	if (! write_only)
	    stage_success = Service::Stop ("pm-profiler");
	stage_success = Service::Disable ("pm-profiler") && stage_success;
    }
    else
    {
	y2milestone ("Restarting pm-profiler daemon");
	if (! write_only)
	    stage_success = Service::Restart ("pm-profiler");
	stage_success = Service::Enable ("pm-profiler") && stage_success;
    }

    if(! stage_success)
    {
	/* Error message */
	Report::Error(_("Cannot restart the pm-profiler daemon."));
    }
    success = success && stage_success;
    stage_success = true;
    sleep(sl);

    /* Progress finished */
    Progress::NextStage();
    sleep(sl);
    sleep (500);

    return true;
}

/**
 * Get all power-management settings from the first parameter
 * (For use by autoinstallation.)
 * @param settings The YCP structure to be imported.
 * @return boolean True on success
 */
global boolean Import (map settings) {
    y2milestone ("Importing settings: %1", settings);
    schemes = settings["schemes"]:[];
    global_settings = settings["global_settings"]:$[];
    return true;
}

/**
 * Dump the power-management settings to a single map
 * (For use by autoinstallation.)
 * @return map Dumped settings (later acceptable by Import ())
 */
global map Export () {
    map<string,any> ret = $[
	"schemes" : schemes,
	"global_settings" : global_settings,
    ];
    y2milestone ("Exporting settings: %1", ret);
    return ret;
}

/**
 * Create a textual summary and a list of unconfigured cards
 * @return summary of the current configuration
 */
global list<string> Summary() {
    string scheme = PowerManagement::global_settings["SCHEME"]:"";
    if (scheme == "")
	scheme = _("Default settings");
    else
    {
      foreach (map<string,string> s, schemes, ``{
	if (s["_scheme_id"]:"" == scheme)
	    scheme = s["SCHEME_DESCRIPTION"]:"";
      });
    }

    list<string> ret = [
	// summary text, %1 is scheme name
	sformat (_("Selected Profile: %1"), scheme),
     ];
    y2milestone ("Power management summary: %1", ret);

    return ret;
}

/**
 * Return packages needed to be installed and removed during
 * Autoinstallation to insure module has all needed software
 * installed.
 * @return map with 2 lists.
 */
global map AutoPackages() {
    return $[ "install":["pm-profiler"], "remove":[] ];
}

/**
 * Translate a text using powersave mo-file
 * @param text string to translate
 * @return string translated text
 */
global string TranslatePowersaveText (string text) {
    if (text == "")
	return text;
    map out = (map)SCR::Execute (.target.bash_output, sformat (
	"TEXTDOMAINDIR=/usr/share/locale/ gettext pm-profiler \"%1\"",
	text));
    if (out["exit"]:-1 != 0)
    {
	return text;
    }
    string translated = out["stdout"]:"";
    return translated;
}

/**
 * Get localized scheme name
 * @param name string original scheme name
 * @return string localized scheme name
 */
global string TranslateSchemeName (string name) {
    return TranslatePowersaveText (name);
}

/**
 * Get localized scheme description
 * @param descr string original scheme desceriptino
 * @return string localized scheme decription
 */
global string TranslateSchemeDescription (string descr) {
    return TranslatePowersaveText (descr);
}

/**
 * Find index of a scheme
 * @param name string scheme name
 * @return integer scheme index (-1 if not found)
 */
global integer FindScheme (string name) {
    integer ret = -1;
    integer index = -1;
    foreach (map<string,string> s, schemes, {
	index = index + 1;
	if (s["SCHEME_NAME"]:"" == name)
	{
	    ret = index;
	}
    });
    return ret;
}

/**
 * Fetch all schemes
 */
global void FetchSchemes () {
    current_schemes = schemes;
}

/**
 * Store all schemes
 */
global void StoreSchemes () {
    schemes = current_schemes;
    modified = true;
}

/**
 * fetch a scheme
 * @param index integer index of the scheme (-1 is new scheme)
 * @param clone integer index of scheme to clone if not exists
 */
global void FetchScheme (integer index, integer clone) {
    current_scheme_index = index;
    if (index == -1)
    {
	if (clone != nil)
	{
	    current_scheme = current_schemes[clone]:$[];

	}
	else
	{
	    current_scheme = current_schemes[0]:$[];
	}
    }
    else
    {
	current_scheme = current_schemes[index]:$[];
    }
    if (current_scheme == $[])
    {
	current_scheme = current_schemes[0]:$[];
    }
}

/**
 * Store the current scheme
 */
global void StoreScheme () {
    if (current_scheme_index == -1)
    {
	current_schemes = add (current_schemes, current_scheme);
    }
    else
    {
	current_schemes[current_scheme_index] = current_scheme;
    }
}

/* EOF */
}
