/****************************************************************************

Copyright (c) 2000 - 2010 Novell, Inc.
All Rights Reserved.

This program is free software; you can redistribute it and/or
modify it under the terms of version 2 of the GNU General Public License as
published by the Free Software Foundation.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.   See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, contact Novell, Inc.

To contact Novell about this file by physical or electronic mail,
you may find current contact information at www.novell.com

****************************************************************************/
/**
 * File:	include/power-management/commandline.ycp
 * Package:	Configuration of power-management
 * Summary:	Command-line interface
 * Authors:	Jiri Srain <jsrain@suse.cz>
 *
 * $Id$
 *
 */

{

import "CommandLine";
import "PowerManagement";

textdomain "power-management";

/**
  * Handler for command line interface
  * @param options map options from the command line
  * @return boolean true if settings have been changed
  */
define boolean PrintHandler (map options) {
    boolean print_all = true;
    boolean printed = false;
/*
    boolean print_all = false;
    if (! (haskey (options, "selected_profile")
	|| haskey (options, "profile")))
    {
	print_all = true;
    }
    if (print_all || haskey (options, "profile"))
    {
	string scheme = options["profile"]:"";
	boolean all_schemes = print_all || scheme == "";
	foreach (map<string,string> s, PowerManagement::schemes, {
	    if (all_schemes || s["SCHEME_NAME"]:"" == scheme)
	    {
		if (printed)
		    CommandLine::Print ("\n");
		// cmdline output, %1 is scheme name
		CommandLine::Print (sformat (_("Profile Name: %1"),
		    s["SCHEME_NAME"]:""));
		// cmdline output, %1 is scheme description
		CommandLine::Print (sformat (_("Profile Description: %1"),
		    s["SCHEME_DESCRIPTION"]:""));
		foreach (string k, string v, s, {
		    if (k != "SCHEME_NAME" && k != "SCHEME_DESCRIPTION"
			&& substring (k, 0, 1) != "_")
		    {
			CommandLine::Print (sformat ("%1: %2", k, v));

		    }
		});
		printed = true;
	    }
	});
    }*/
    if (print_all || haskey (options, "selected_profile"))
    {
	if (printed)
	    CommandLine::Print ("\n");
	// header for commandline output
	CommandLine::Print (_("Power Saving Profiles:\n"));
	string scheme = PowerManagement::global_settings["SCHEME"]:"";
	if (scheme == "")
	    scheme = _("Default Profile");
	foreach (map<string,string> s, PowerManagement::schemes, {
	    if (s["_scheme_id"]:"" == scheme)
	    {
		scheme = s["SCHEME_NAME"]:scheme;
		return;
	    }
	});
	scheme = PowerManagement::TranslateSchemeName (scheme);
	CommandLine::Print (sformat (_("Selected Profile: %1"), scheme));
	list<string> available = maplist (map<string,string> s,
	    PowerManagement::schemes,
	{
	    return PowerManagement::TranslateSchemeName (s["SCHEME_NAME"]:nil);
	});
	available = filter (string s, available, {return s != nil;});
	// cmdline about power saving schemes, %1 is list of schemes,
	CommandLine::Print (sformat (_("Available Profiles: %1"),
	    mergestring (available, ", ")));
	printed = true;
    }
    return false;
}

/**
  * Handler for command line interface
  * @param options map options from the command line
  * @return boolean true if settings have been changed
  */
boolean SetHandler (map options) {
    if (haskey (options, "profile"))
    {
	string scheme = options["profile"]:"";
	string scheme_id = nil;
	boolean ret = false;
	foreach (map<string,string> s, PowerManagement::schemes, {
	    if (s["SCHEME_NAME"]:nil == scheme)
		scheme_id = s["_scheme_id"]:"";
	});
	if (scheme_id != nil)
	{
	    PowerManagement::global_settings["SCHEME"] = scheme_id;
	    ret = true;
	}
	else if (scheme != "")
	{
	    // error report
	    CommandLine::Error (_("Specified profile not found."));
	}
	return ret;
    }
    return false;
}

/**
  * Handler for command line interface
  * @param options map options from the command line
  * @return boolean true if settings have been changed
  */
boolean SchemeHandler (map options) {
    boolean s_add = haskey (options, "add");
    boolean s_edit = haskey (options, "edit");
    boolean s_delete = haskey (options, "delete");
    if (! (s_add || s_edit || s_delete))
    {
	// error report
	CommandLine::Error (_("Operation with the profile not specified."));
	return false;
    }
    if (! haskey (options, "name"))
    {
	// error report
	CommandLine::Error (_("Profile name not specified."));
	return false;
    }
    string scheme_name = options["name"]:"";
    if (s_delete)
    {
	PowerManagement::schemes = filter (map<string,string> s,
	    PowerManagement::schemes,
	{
	    return s["SCHEME_NAME"]:"" != scheme_name;
	});
	return true;
    }

    PowerManagement::FetchSchemes ();
    if (s_add)
    {
	string original_scheme = scheme_name;
	if (! haskey (options, "clone"))
	{
	    original_scheme = PowerManagement::schemes[0, "SCHEME_NAME"]:"";
	}
	else
	{
	    original_scheme = options["clone"]:"";
	}
	PowerManagement::FetchScheme (-1,
	    PowerManagement::FindScheme (original_scheme));
	PowerManagement::current_scheme["SCHEME_NAME"] = scheme_name;
    }
    else
    {
	PowerManagement::FetchScheme (
	    PowerManagement::FindScheme (scheme_name),
	    nil);
    }
    if (haskey (options, "description"))
    {
	PowerManagement::current_scheme["SCHEME_DESCRIPTION"]
	    = options["description"]:"";
    }
    if (haskey (options, "rename"))
    {
	PowerManagement::current_scheme["SCHEME_NAME"]
	    = options["rename"]:"";
    }
    if (haskey (options, "option") && haskey (options, "value"))
    {
	PowerManagement::current_scheme[options["option"]:""]
	    = options["value"]:"";
    }

    PowerManagement::StoreScheme ();
    PowerManagement::StoreSchemes ();
    return true;
}

map cmdline = $[
   "id"			: "power-management",
    // command line help text for power management module
    "help"		: _("Power management configuration module"),
    "guihandler"	: GuiHandler,
    "initialize"	: PowerManagement::Read,
    "finish"		: PowerManagement::Write,
    "actions" : $[
	"print" : $[
	    "handler"	: PrintHandler,
	    // command line help text for an action
	    "help"	: _("Display current settings"),
	],
	"set" : $[
	    "handler"	: SetHandler,
	    // command line help text for an action
	    "help"	: _("Set general settings"),
	],
/*
	"profile" : $[
	    "handler"	: SchemeHandler,
	    // command line help text for an action
	    "help"	: _("Set options of a profile"),
	],
*/
    ],

    "options"       : $[
	"profile" : $[
	    "type"	: "string",
	    // command line help text for an option
	    "help"	: _("Display only specified profile"),
	],
	"selected_profile" : $[
	    // command line help text for an option
	    "help"	: _("Display only profile selected for use"),
	],
	"profile" : $[
	    // command line help text for an option
	    "help"	: _("Profile to be used"),
	    "type"	: "string",
	],
	"name" : $[
	    // command line help text for an option
	    "help"	: _("The profile name"),
	    "type"	: "string",
	],
	"add" : $[
	    // command line help text for an option
	    "help"	: _("Add a new profile"),
	],
	"edit" : $[
	    // command line help text for an option
	    "help"	: _("Edit an existing profile"),
	],
	"delete" : $[
	    // command line help text for an option
	    "help"	: _("Remove an existing profile"),
	],
	"description" : $[
	    // command line help text for an option
	    "help"	: _("The description of the profile"),
	    "type"	: "string",
	],
	"clone" : $[
	    // command line help text for an option
	    "help"	: _("The profile to clone"),
	    "type"	: "string",
	],
	"option" : $[
	    // command line help text for an option
	    "help"	: _("Option of a profile to modify"),
	    "type"	: "string",
	],
	"value" : $[
	    // command line help text for an option
	    "help"	: _("Value of the specified option to set"),
	    "type"	: "string",
	],
	"rename" : $[
	    // command line help text for an option
	    "help"	: _("New name of the profile to rename"),
	    "type"	: "string",
	],
    ],

    "mappings"      : $[
//	"print"		: [ "selected_profile", "profile", ],
	"print"		: [ ],
	"set"		: [ "profile", ],
//	"profile"	: ["add", "edit", "delete", "name", "description",
//				"clone", "option", "value", "rename"],
    ],
];

/* EOF */
}
