/****************************************************************************

Copyright (c) 2000 - 2010 Novell, Inc.
All Rights Reserved.

This program is free software; you can redistribute it and/or
modify it under the terms of version 2 of the GNU General Public License as
published by the Free Software Foundation.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.   See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, contact Novell, Inc.

To contact Novell about this file by physical or electronic mail,
you may find current contact information at www.novell.com

****************************************************************************/
/**
 * File:	include/power-management/complex.ycp
 * Package:	Configuration of power-management
 * Summary:	Dialogs definitions
 * Authors:	Jiri Srain <jsrain@suse.cz>
 *
 * $Id$
 */

{

textdomain "power-management";

import "Label";
import "Popup";
import "PowerManagement";
import "String";

include "power-management/helps.ycp";


// scheme selection widget

/**
 * Handle function of a widget
 * @param key string widget id
 * @param event map event that will be handled
 * @return symbol for wizard sequencer
 */
define symbol SchemeSelectionHandle (string key, map event) {
    any ev_id = event["ID"]:nil;
    if (ev_id == `schemes_edit)
	return `schemes_edit;
    if (ev_id == `scheme)
    {
	string current = (string)UI::QueryWidget (`id (ev_id), `Value);
	if (current == "")
	{
	    UI::ChangeWidget (`id (`descr), `Value, _("Default system settings"));
	    return nil;
	}
	string descr = "";
	foreach (map s, PowerManagement::schemes, {
	    if (s["_scheme_id"]:"" == current)
		descr = s["SCHEME_DESCRIPTION"]:"";
	});
	descr = PowerManagement::TranslateSchemeDescription (descr);
	if (descr == "")
	{
	    // fallback scheme description, displayed in a rich text
	    // but without HTML tags!!!
	    descr = _("No profile description available");
	}
	UI::ChangeWidget (`id (`descr), `Value, descr);
    }

    return nil;
}

/**
 * Init function of a widget
 * @param key string widget id
 */
define void SchemeSelectionInit (string key) {
    list items = maplist (map<string,string> s, PowerManagement::schemes, {
	string id = s["_scheme_id"]:"";
	string name = s["SCHEME_NAME"]:id;
	name = PowerManagement::TranslateSchemeName (name);
	return `item (`id (id), name);
    });
    items = add (items, `item (`id (""), _("Default")));

    UI::ReplaceWidget (`scheme_rp,
	`ComboBox (`id (`scheme), `opt (`hstretch, `notify),
	    // combo box
	    _("&Selected Profile"), items));
    string scheme = PowerManagement::global_settings["SCHEME"]:"";
    UI::ChangeWidget (`id (`scheme), `Value, scheme);
    SchemeSelectionHandle (key, $["ID" : `scheme ]);
}

/**
 * Store settings of a widget
 * @param key string widget id
 * @param event map event that caused storing of widget settings
 */
define void SchemeSelectionStore (string key, map event) {
    PowerManagement::global_settings["SCHEME"]
	= (string)UI::QueryWidget (`id (`scheme), `Value);
}

/**
 * Get description map of a widget
 * @return a map widget description map
 */
define map<string,any> getSchemeSelectionWidget () {
    return $[
	"widget" : `custom,
	// frame
	"custom_widget" : `Frame (_("Energy Saving Profiles"), `VBox (
	    `HBox (
		`HWeight (1, `VBox (
		    `ReplacePoint (`id (`scheme_rp),
			`ComboBox (`id (`scheme), `opt (`hstretch, `notify),
			    // combo box
			    _("&AC Powered"), [])),
		    `RichText (`id (`descr), `opt (`hstretch), "")
		))
/*
	    ),
	    `HBox (
		`HStretch (),
		`PushButton (`id (`schemes_edit),
		    // push button
		    _("Ed&it Profiles")),
		`HStretch ()
*/
	    )
	)),
	"init" : SchemeSelectionInit,
	"handle" : SchemeSelectionHandle,
	"handle_events" : [`schemes_edit, `scheme, `dc_scheme],
	"store" : SchemeSelectionStore,
	"help" : HELPS["scheme_selection"]:"",
    ];
}


// schemes list widget

/**
 * Redraw the table of energy saving schemes
 */
define void SchemesRedraw () {
    list items = maplist (map<string,string> s,
	PowerManagement::current_schemes,
    {
	string scheme_id = s["_scheme_id"]:"";
	string name = s["SCHEME_NAME"]:scheme_id;
	name = PowerManagement::TranslateSchemeName (name);
	string descr = s["SCHEME_DESCRIPTION"]:"";
	descr = PowerManagement::TranslateSchemeDescription (descr);
	if (descr == "")
	{
	    // fallback scheme description, table entre
	    descr = _("No profile description available");
	}
	return `item (`id (scheme_id), name, descr);
    });
    UI::ChangeWidget (`id (`schemes), `Items, items);
    UI::SetFocus (`schemes);
}

/**
 * Handle function of a widget
 * @param key string widget id
 * @param event map event that will be handled
 * @return symbol for wizard sequencer
 */
define symbol SchemesHandle (string key, map event) {
    any event_id = event["ID"]:nil;
    string selected = (string)UI::QueryWidget (`id (`schemes), `CurrentItem);
    integer index = -1;
    integer found = -1;
    foreach (map s, PowerManagement::current_schemes, ``{
	index = index + 1;
	if (PowerManagement::current_schemes[index,"_scheme_id"]:"" == selected)
	    found = index;
    });
    if (event_id == `add)
    {
	PowerManagement::current_scheme_index = -1;
	PowerManagement::current_scheme
	    = PowerManagement::current_schemes[found]:$[];
	PowerManagement::current_scheme["_scheme_id"] = "";
	PowerManagement::current_scheme["SCHEME_NAME"] = "";
	PowerManagement::new_schemes[""] = selected;
	return `add;
    }
    else if (event_id == `edit)
    {
	if (selected == nil)
	{
	    // popup message
	    Popup::Message (_("No profile selected."));
	}
	if (selected == "performance" || selected == "powersave")
	{
	  // FIXME update after talking to MD people
	  if (false)
	  {
	    // popup message
	    Popup::Message (_("The selected profile cannot be modified.
Add a new one instead."));
	    return nil;
	  }
	}
	PowerManagement::current_scheme_index = found;
	PowerManagement::current_scheme
	    = PowerManagement::current_schemes[found]:$[];
	return `edit;
    }
    else if (event_id == `delete)
    {
	if (selected == nil)
	{
	    // popup message
	    Popup::Message (_("No profile selected."));
	}
	PowerManagement::current_schemes = filter (
	    map<string,string>s,
	    PowerManagement::current_schemes,
	{
	    return s["_scheme_id"]:"" != selected;
	});
	SchemesRedraw ();
	UI::ChangeWidget (`id (`schemes), `CurrentItem,
	    PowerManagement::current_schemes[0, "_scheme_id"]:"");
	if (haskey (PowerManagement::new_schemes, selected))
	    PowerManagement::new_schemes = (map<string,string>)remove (
		PowerManagement::new_schemes, selected);
    }
    selected = (string)UI::QueryWidget (`id (`schemes), `CurrentItem);
    boolean enabled = true;
    if (selected == "performance" || selected == "powersave")
    {
	enabled = false;
    }
    UI::ChangeWidget (`id (`delete), `Enabled, enabled);
    return nil;
}

/**
 * Init function of a widget
 * @param key string widget id
 */
define void SchemesInit (string key) {
    SchemesRedraw ();
    SchemesHandle (key, $[]);
    UI::ChangeWidget (`id (`schemes), `CurrentItem,
	PowerManagement::current_schemes[0, "_scheme_id"]:"");
}

/**
 * Get description map of a widget
 * @return a map widget description map
 */
define map<string,any> getSchemesListWidget () {
    return $[
	"widget" : `custom,
	"custom_widget" : `VBox (
	    `Table (`id (`schemes), `opt (`notify, `immediate), `header (
		// table header
		_("Profile Name"),
		// table header
		_("Profile Description")),
		[]),
	    `HBox (
		`PushButton (`id (`add), Label::AddButton ()),
		`PushButton (`id (`edit), Label::EditButton ()),
		`PushButton (`id (`delete), Label::DeleteButton ()),
		`HStretch ()
	    )
	),
	"init" : SchemesInit,
	"handle" : SchemesHandle,
	"help" : HELPS["schemes_list"]:"",
    ];
}

// scheme name widget

string original_scheme_name = "";
string widget_init_scheme_name = "";

/**
 * Init function of a widget
 * @param key string widget id
 */
define void SchemeNameInit (string key) {
    string scheme_name
	= PowerManagement::current_scheme["SCHEME_NAME"]:"";
    if (scheme_name == "")
        scheme_name = PowerManagement::current_scheme["_scheme_id"]:"";
    scheme_name = PowerManagement::TranslateSchemeName (scheme_name);
    original_scheme_name = PowerManagement::current_schemes[
	PowerManagement::current_scheme_index, "SCHEME_NAME"]:"";
    UI::ChangeWidget (`id (key), `Value, scheme_name);
    widget_init_scheme_name = scheme_name;
}

/**
 * Validate function of a widget
 * @param key string widget id
 * @param event map event that caused widget validation
 * @return boolean true if validation succeeded
 */
define boolean SchemeNameValidate (string key, map event) {
    string new_name = (string)UI::QueryWidget (`id (key), `Value);
    if (new_name == "")
    {
	// popup message
	Popup::Message (_("Profile name must be set."));
	return false;
    }
    if (new_name == original_scheme_name)
	return true;
    list<string> names = maplist (map s, PowerManagement::current_schemes, {
	return s["SCHEME_NAME"]:s["_scheme_key"]:"";
    });
    if (contains (names, new_name))
    {
	// popup message
	Popup::Message (_("The specified profile name is not unique."));
	return false;
    }
    if (size (new_name) > 32)
    {
	Popup::Message (
	    // pop-up message
	    _("The profile name must not be longer than 32 characters."));
	return false;
    }
    return true;
}

/**
 * Store settings of a widget
 * @param key string widget id
 * @param event map event that caused storing of widget settings
 */
define void SchemeNameStore (string key, map event) {
    string new_name = (string)UI::QueryWidget (`id (key), `Value);
    if (new_name != widget_init_scheme_name)
	PowerManagement::current_scheme["SCHEME_NAME"] = new_name;

    if (original_scheme_name == "")
    {
	string scheme_id = new_name;
	// allow only ASCII characters + numbers in the file name
	scheme_id = filterchars (scheme_id, String::CAlnum());
	if (scheme_id == "")
	    scheme_id = "user";
	list<string> ids = maplist (map s, PowerManagement::current_schemes, {
	    return s["_scheme_id"]:"";
	});
	if (contains (ids, scheme_id))
	{
	    integer index = 0;
	    while (contains (ids, sformat ("%1_%2", scheme_id, index)))
		index = index + 1;
	    scheme_id = sformat ("%1_%2", scheme_id, index);
	}
	PowerManagement::current_scheme["_scheme_id"] = scheme_id;
	PowerManagement::new_schemes[scheme_id]
	    = PowerManagement::new_schemes[""]:"";
    }
}

/**
 * Get description map of a widget
 * @return a map widget description map
 */
define map<string,any> getSchemeNameWidget () {
    return $[
	"widget" : `textentry,
	// text entry
	"label" : _("S&cheme Name"),
	"help" : HELPS["scheme_name"]:"",
	"init" : SchemeNameInit,
	"store" : SchemeNameStore,
	"validate_type" : `function,
	"validate_function" : SchemeNameValidate,
    ];
}

// scheme description widget

string widget_init_scheme_descr = "";

/**
 * Init function of a widget
 * @param key string widget id
 */
define void SchemeDescrInit (string key) {
    string descr = (string)
	(PowerManagement::current_scheme["SCHEME_DESCRIPTION"]:"");
    descr = PowerManagement::TranslateSchemeDescription (descr);
    UI::ChangeWidget (`id (key), `Value, descr);
    widget_init_scheme_descr = descr;
}

/**
 * Store settings of a widget
 * @param key string widget id
 * @param event map event that caused storing of widget settings
 */
define void SchemeDescrStore (string key, map event) {
    string descr = (string)UI::QueryWidget (`id (key), `Value);
    if (widget_init_scheme_descr != descr)
	PowerManagement::current_scheme["SCHEME_DESCRIPTION"] = descr;
}

/**
 * Get description map of a widget
 * @return a map widget description map
 */
define map<string,any> getSchemeDescrWidget () {
    return $[
	"widget" : `textentry,
	// text entry
	"label" : _("Profile &Description"),
	"help" : HELPS["scheme_descr"]:"",
	"init" : SchemeDescrInit,
	"store" : SchemeDescrStore,
    ];
}

// hard disk settings widget

/**
 * Init function of a widget
 * @param key string widget id
 */
define void HardDiskInit (string key) {
    string value = (string)
	PowerManagement::current_scheme["SATA_ALPM"]:"";
    if (value == "")
	value = "max_performance";
    UI::ChangeWidget (`id (`alpm), `Value, value);
}

/**
 * Store settings of a widget
 * @param key string widget id
 * @param event map event that caused storing of widget settings
 */
define void HardDiskStore (string key, map event) {
    PowerManagement::current_scheme["SATA_ALPM"]
	= (string)UI::QueryWidget (`id (`alpm), `Value);
}

/**
 * Get description map of a widget
 * @return a map widget description map
 */
define map<string,any> getHardDiskWidget () {
    return $[
	"widget" : `custom,
	// frame,
	"custom_widget" : `Frame (_("SATA Power Management"), `HBox (`HStretch (), `VBox (
	    `VStretch (),
	    // combo box
	    `Left (`ComboBox (`id (`alpm), `opt (`hstretch),
		// combo box
		_("Aggressive Link Power Management"),
		[
		    `item (`id ("min_power"),
			// combo box item
			_("Maximum Power Saving")),
		    `item (`id ("medium_power"),
			// combo box item
			_("Medium Power Saving")),
		    `item (`id ("max_performance"),
			// combo box item
			_("Maximum Performance")),
		])),
	    `VStretch ()), `HStretch ()
	)),
	"init" : HardDiskInit,
	"store" : HardDiskStore,
	"help" : HELPS["hard_disk"]:"",
    ];
}

// cpu policy widget

/**
 * Handle function of a widget
 * @param key string widget id
 * @param event map event that will be handled
 * @return symbol for wizard sequencer
 */
define symbol CpuHandle (string key, map event) {
    string governor = (string)UI::QueryWidget (`id (`governor), `Value);
    UI::ChangeWidget (`id (`ondemand_threshold), `Enabled, governor == "ondemand");
    return nil;
}

/**
 * Init function of a widget
 * @param key string widget id
 */
define void CpuInit (string key) {
y2internal ("CS: %1", PowerManagement::current_scheme);
    UI::ChangeWidget (`id (`governor), `Value,
	PowerManagement::current_scheme["CPUFREQ_GOVERNOR"]:"performance");
    UI::ChangeWidget (`id (`sched_saving), `Value,
	PowerManagement::current_scheme["CPUFREQ_SCHED_MC_POWER_SAVINGS"]:"0" == "1");
    UI::ChangeWidget (`id (`ondemand_threshold), `Value,
	tointeger (PowerManagement::current_scheme["CPUFREQ_ONDEMAND_UP_THRESHOLD"]:"0"));
    UI::ChangeWidget (`id (`powersave_bias), `Value,
	tointeger (PowerManagement::current_scheme["CPUFREQ_ONDEMAND_POWERSAVE_BIAS"]:"1000") / 10);
    CpuHandle (key, nil);
}

/**
 * Store settings of a widget
 * @param key string widget id
 * @param event map event that caused storing of widget settings
 */
define void CpuStore (string key, map event) {
    PowerManagement::current_scheme["CPUFREQ_GOVERNOR"] =
	(string)UI::QueryWidget (`id (`governor), `Value);
    PowerManagement::current_scheme["CPUFREQ_SCHED_MC_POWER_SAVINGS"] =
	(boolean)UI::QueryWidget (`id (`sched_saving), `Value) ? "1" : "0";
    PowerManagement::current_scheme["CPUFREQ_ONDEMAND_UP_THRESHOLD"] =
	tostring ((integer)UI::QueryWidget (`id (`ondemand_threshold), `Value));
    PowerManagement::current_scheme["CPUFREQ_ONDEMAND_POWERSAVE_BIAS"] =
	tostring ((integer)UI::QueryWidget (`id (`powersave_bias), `Value) * 10);
}


map<string,any> getCpuWidget () {
    return $[
	"widget" : `custom,
	// frame,
	"custom_widget" : `Frame (_("CPU Power Management"), `HBox (`HStretch (), `VBox (
	    `VStretch (),
	    // combo box
	    `Left (`ComboBox (`id (`governor), `opt (`hstretch, `notify),
		// combo box
		_("CPU Frequency Governor"),
		[
		    `item (`id ("powersave"),
			// combo box item
			_("Maximum Power Saving")),
		    `item (`id ("performance"),
			// combo box item
			_("Maximum Performance")),
		    `item (`id ("ondemand"),
			// combo box item
			_("On Demand")),
		    `item (`id ("userspace"),
			// combo box item
			_("User Space")),
		])),
	    `VStretch (),
	    `Left (`IntField (`id (`ondemand_threshold), _("Load Checking Interval"), 0, 1000000, 0)),
	    `VStretch (),
	    `Left (`IntField (`id (`powersave_bias), _("Lower Frequency by (percent)"), 0, 100, 0)),
	    `VStretch (),
	    `Left (`CheckBox (`id (`sched_saving), _("Balance Load between CPU Cores")))
	), `HStretch ())),
	"init" : CpuInit,
	"store" : CpuStore,
	"handle" : CpuHandle,
	"handle_events" : [ `governor ],
	"help" : HELPS["cpu"]:"",
    ];
}

// general settings

map<string,map<string,any> > widgets = $[
    "scheme_selection" : getSchemeSelectionWidget (),
    "schemes_list" : getSchemesListWidget (),
    "scheme_name" : getSchemeNameWidget (),
    "scheme_descr" : getSchemeDescrWidget (),
    "hard_disk" : getHardDiskWidget (),
    "cpu" : getCpuWidget (),
];

/* EOF */
}
